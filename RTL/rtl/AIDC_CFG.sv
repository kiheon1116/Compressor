//
//
// Generated by Semifore, Inc. csrCompile
//    System Verilog RTL output
//
// Version: 2021.09.01 Build: development Linux 64-bit
//
// Command Line: 
//    ./csrCompileLite AIDC/AIDC_CFG.rdl -c config.css -t sv
//
// Input files: 
//    AIDC/AIDC_CFG.rdl
//
// Configuration files: 
//    config.css
//
// Generated on: Thu Nov  4 06:41:33 2021
//           by: ScalableArchiLab
//

//
// Addressmap: AIDC_CFG
//
//   Bus Protocol: AMBA_4_AXILite
//   Bus Address Units: bytes
//
//   Access: read-write
//   Offset Units: bytes
//   Word size: 4 bytes
//
module AIDC_CFG (
   
   output wire [31:0] VERSION_version,

   output wire GLOBAL_CTRL_clr_stats,
   output wire GLOBAL_CTRL_Enable,
   
   output wire ERR_CLR_clr_burst,
   output wire ERR_CLR_clr_oor,
   output wire ERR_CLR_clr_cfg,
   
   output wire [31:0] R0_FPA_START_start_addr,
   output wire [31:0] R0_FPA_END_end_addr,
   output wire [31:0] R0_FPA_BASE_base_addr,
   output wire [2:0] R0_CMP_CTRL_cmp_ratio,
   
   output wire [31:0] R1_FPA_START_start_addr,
   output wire [31:0] R1_FPA_END_end_addr,
   output wire [31:0] R1_FPA_BASE_base_addr,
   output wire [2:0] R1_CMP_CTRL_cmp_ratio,
   
   output wire ARREADY,
   
   output wire [31:0] RDATA,
   output wire [1:0] RRESP,
   output wire RVALID,
   
   output wire AWREADY,
   
   output wire WREADY,
   
   output wire [1:0] BRESP,
   output wire BVALID,
   
   
   input  wire [31:0] CAP_REGION_max_region_size,
   
   input  wire STAT_CMP1_cmp_blk_cnt_increment,
   input  wire STAT_CMP2_cmp_overflown_byte_cnt_increment,
   
   input  wire ERR_STATUS_err_burst,
   input  wire ERR_STATUS_err_oor,
   input  wire ERR_STATUS_err_cfg,
   
   input  wire [7:0] ARADDR,
   input  wire ARVALID,
   
   input  wire RREADY,
   
   input  wire [7:0] AWADDR,
   input  wire AWVALID,
   
   input  wire [31:0] WDATA,
   input  wire WVALID,
   
   input  wire BREADY,
   
   
   input  wire RESET,
   input  wire ACLK
   );

   // internal net declarations
   reg    csr_internal_bus_state;
   reg    csr_internal_bus_next_state;
   reg    csr_internal_field_GLOBAL_CTRL_clr_stats;
   reg    csr_internal_field_GLOBAL_CTRL_Enable;
   reg    [31:0] csr_internal_field_STAT_CMP1_cmp_blk_cnt;
   reg    [31:0] csr_internal_field_STAT_CMP2_cmp_overflown_byte_cnt;
   reg    csr_internal_field_ERR_CLR_clr_burst;
   reg    csr_internal_field_ERR_CLR_clr_oor;
   reg    csr_internal_field_ERR_CLR_clr_cfg;
   reg    [31:0] csr_internal_field_R0_FPA_END_end_addr;
   reg    [31:0] csr_internal_field_R0_FPA_BASE_base_addr;
   reg    [2:0] csr_internal_field_R0_CMP_CTRL_cmp_ratio;
   reg    [31:0] csr_internal_field_R1_FPA_END_end_addr;
   reg    [31:0] csr_internal_field_R1_FPA_BASE_base_addr;
   reg    [2:0] csr_internal_field_R1_CMP_CTRL_cmp_ratio;
   reg    [7:0] csr_internal_bus_pending_read_request_address;
   reg    csr_internal_bus_read_active;
   reg    csr_internal_bus_pending_read_request_valid;
   reg    [31:0] csr_internal_bus_pending_read_response_data;
   reg    [1:0] csr_internal_bus_pending_read_response_status;
   reg    csr_internal_bus_pending_read_response_valid;
   reg    [7:0] csr_internal_bus_pending_write_request_address;
   reg    csr_internal_bus_write_active;
   reg    csr_internal_bus_pending_write_request_valid;
   reg    [31:0] csr_internal_bus_pending_write_data_data;
   reg    [31:0] csr_internal_bus_write_data;
   reg    csr_internal_bus_pending_write_data_valid;
   reg    [1:0] csr_internal_bus_pending_write_response_status;
   reg    csr_internal_bus_pending_write_response_valid;
   reg    csr_internal_bus_read_priority;
   reg    [7:0] csr_internal_bus_address;

   wire   [31:0] csr_internal_field_VERSION_version;
   wire   csr_internal_decode_VERSION;
   wire   [31:0] csr_internal_read_value_VERSION;
   wire   [31:0] csr_internal_read_bus_VERSION;
   wire   [31:0] csr_internal_field_CAP_REGION_max_region_size;
   wire   [31:0] csr_internal_input_CAP_REGION_max_region_size;
   wire   csr_internal_decode_CAP_REGION;
   wire   [31:0] csr_internal_read_value_CAP_REGION;
   wire   [31:0] csr_internal_read_bus_CAP_REGION;
   wire   csr_internal_next_field_GLOBAL_CTRL_clr_stats;
   wire   csr_internal_write_access_GLOBAL_CTRL_clr_stats;
   wire   csr_internal_reset_value_GLOBAL_CTRL_clr_stats;
   wire   csr_internal_next_field_GLOBAL_CTRL_Enable;
   wire   csr_internal_write_access_GLOBAL_CTRL_Enable;
   wire   csr_internal_reset_value_GLOBAL_CTRL_Enable;
   wire   csr_internal_decode_GLOBAL_CTRL;
   wire   [31:0] csr_internal_read_value_GLOBAL_CTRL;
   wire   [31:0] csr_internal_read_bus_GLOBAL_CTRL;
   wire   [31:0] csr_internal_next_field_STAT_CMP1_cmp_blk_cnt;
   wire   csr_internal_increment_STAT_CMP1_cmp_blk_cnt;
   wire   [31:0] csr_internal_incremented_STAT_CMP1_cmp_blk_cnt;
   wire   [31:0] csr_internal_reset_value_STAT_CMP1_cmp_blk_cnt;
   wire   csr_internal_decode_STAT_CMP1;
   wire   [31:0] csr_internal_read_value_STAT_CMP1;
   wire   [31:0] csr_internal_read_bus_STAT_CMP1;
   wire   [31:0] csr_internal_next_field_STAT_CMP2_cmp_overflown_byte_cnt;
   wire   csr_internal_increment_STAT_CMP2_cmp_overflown_byte_cnt;
   wire   [31:0] csr_internal_incremented_STAT_CMP2_cmp_overflown_byte_cnt;
   wire   [31:0] csr_internal_reset_value_STAT_CMP2_cmp_overflown_byte_cnt;
   wire   csr_internal_decode_STAT_CMP2;
   wire   [31:0] csr_internal_read_value_STAT_CMP2;
   wire   [31:0] csr_internal_read_bus_STAT_CMP2;
   wire   csr_internal_field_ERR_STATUS_err_burst;
   wire   csr_internal_input_ERR_STATUS_err_burst;
   wire   csr_internal_field_ERR_STATUS_err_oor;
   wire   csr_internal_input_ERR_STATUS_err_oor;
   wire   csr_internal_field_ERR_STATUS_err_cfg;
   wire   csr_internal_input_ERR_STATUS_err_cfg;
   wire   csr_internal_decode_ERR_STATUS;
   wire   [31:0] csr_internal_read_value_ERR_STATUS;
   wire   [31:0] csr_internal_read_bus_ERR_STATUS;
   wire   csr_internal_next_field_ERR_CLR_clr_burst;
   wire   csr_internal_write_access_ERR_CLR_clr_burst;
   wire   csr_internal_reset_value_ERR_CLR_clr_burst;
   wire   csr_internal_next_field_ERR_CLR_clr_oor;
   wire   csr_internal_write_access_ERR_CLR_clr_oor;
   wire   csr_internal_reset_value_ERR_CLR_clr_oor;
   wire   csr_internal_next_field_ERR_CLR_clr_cfg;
   wire   csr_internal_write_access_ERR_CLR_clr_cfg;
   wire   csr_internal_reset_value_ERR_CLR_clr_cfg;
   wire   csr_internal_decode_ERR_CLR;
   wire   [31:0] csr_internal_field_R0_FPA_START_start_addr;
   wire   csr_internal_decode_R0_FPA_START;
   wire   [31:0] csr_internal_read_value_R0_FPA_START;
   wire   [31:0] csr_internal_read_bus_R0_FPA_START;
   wire   [31:0] csr_internal_next_field_R0_FPA_END_end_addr;
   wire   csr_internal_write_access_R0_FPA_END_end_addr;
   wire   [31:0] csr_internal_reset_value_R0_FPA_END_end_addr;
   wire   csr_internal_decode_R0_FPA_END;
   wire   [31:0] csr_internal_read_value_R0_FPA_END;
   wire   [31:0] csr_internal_read_bus_R0_FPA_END;
   wire   [31:0] csr_internal_next_field_R0_FPA_BASE_base_addr;
   wire   csr_internal_write_access_R0_FPA_BASE_base_addr;
   wire   [31:0] csr_internal_reset_value_R0_FPA_BASE_base_addr;
   wire   csr_internal_decode_R0_FPA_BASE;
   wire   [31:0] csr_internal_read_value_R0_FPA_BASE;
   wire   [31:0] csr_internal_read_bus_R0_FPA_BASE;
   wire   [2:0] csr_internal_next_field_R0_CMP_CTRL_cmp_ratio;
   wire   csr_internal_write_access_R0_CMP_CTRL_cmp_ratio;
   wire   [2:0] csr_internal_reset_value_R0_CMP_CTRL_cmp_ratio;
   wire   csr_internal_decode_R0_CMP_CTRL;
   wire   [31:0] csr_internal_read_value_R0_CMP_CTRL;
   wire   [31:0] csr_internal_read_bus_R0_CMP_CTRL;
   wire   [31:0] csr_internal_field_R1_FPA_START_start_addr;
   wire   csr_internal_decode_R1_FPA_START;
   wire   [31:0] csr_internal_read_value_R1_FPA_START;
   wire   [31:0] csr_internal_read_bus_R1_FPA_START;
   wire   [31:0] csr_internal_next_field_R1_FPA_END_end_addr;
   wire   csr_internal_write_access_R1_FPA_END_end_addr;
   wire   [31:0] csr_internal_reset_value_R1_FPA_END_end_addr;
   wire   csr_internal_decode_R1_FPA_END;
   wire   [31:0] csr_internal_read_value_R1_FPA_END;
   wire   [31:0] csr_internal_read_bus_R1_FPA_END;
   wire   [31:0] csr_internal_next_field_R1_FPA_BASE_base_addr;
   wire   csr_internal_write_access_R1_FPA_BASE_base_addr;
   wire   [31:0] csr_internal_reset_value_R1_FPA_BASE_base_addr;
   wire   csr_internal_decode_R1_FPA_BASE;
   wire   [31:0] csr_internal_read_value_R1_FPA_BASE;
   wire   [31:0] csr_internal_read_bus_R1_FPA_BASE;
   wire   [2:0] csr_internal_next_field_R1_CMP_CTRL_cmp_ratio;
   wire   csr_internal_write_access_R1_CMP_CTRL_cmp_ratio;
   wire   [2:0] csr_internal_reset_value_R1_CMP_CTRL_cmp_ratio;
   wire   csr_internal_decode_R1_CMP_CTRL;
   wire   [31:0] csr_internal_read_value_R1_CMP_CTRL;
   wire   [31:0] csr_internal_read_bus_R1_CMP_CTRL;
   wire   [7:0] csr_internal_bus_read_request_address;
   wire   [7:0] csr_internal_bus_next_pending_read_request_address;
   wire   csr_internal_bus_read_request_ready;
   wire   csr_internal_bus_read_request_valid;
   wire   csr_internal_bus_read_request_available;
   wire   csr_internal_bus_read_available;
   wire   csr_internal_bus_select_read;
   wire   csr_internal_bus_next_read_active;
   wire   csr_internal_bus_read_ready;
   wire   csr_internal_bus_pending_read_request_load;
   wire   csr_internal_bus_next_pending_read_request_valid;
   wire   csr_internal_bus_read_request_transfer;
   wire   [31:0] csr_internal_bus_read_response_data;
   wire   [31:0] csr_internal_bus_next_pending_read_response_data;
   wire   [1:0] csr_internal_bus_read_response_status;
   wire   [1:0] csr_internal_bus_next_pending_read_response_status;
   wire   [1:0] csr_internal_bus_read_status;
   wire   csr_internal_bus_read_response_ready;
   wire   csr_internal_bus_read_response_valid;
   wire   csr_internal_bus_pending_read_response_load;
   wire   csr_internal_bus_next_pending_read_response_valid;
   wire   csr_internal_bus_read_response_transfer;
   wire   [7:0] csr_internal_bus_write_request_address;
   wire   [7:0] csr_internal_bus_next_pending_write_request_address;
   wire   csr_internal_bus_write_request_ready;
   wire   csr_internal_bus_write_request_valid;
   wire   csr_internal_bus_write_request_available;
   wire   csr_internal_bus_write_data_available;
   wire   csr_internal_bus_write_available;
   wire   csr_internal_bus_select_write;
   wire   csr_internal_bus_next_write_active;
   wire   csr_internal_bus_write_ready;
   wire   csr_internal_bus_pending_write_request_load;
   wire   csr_internal_bus_next_pending_write_request_valid;
   wire   csr_internal_bus_write_request_transfer;
   wire   [31:0] csr_internal_bus_write_data_data;
   wire   [31:0] csr_internal_bus_next_pending_write_data_data;
   wire   [31:0] csr_internal_bus_next_write_data;
   wire   csr_internal_bus_write_data_ready;
   wire   csr_internal_bus_write_data_valid;
   wire   csr_internal_bus_pending_write_data_load;
   wire   csr_internal_bus_next_pending_write_data_valid;
   wire   csr_internal_bus_write_data_transfer;
   wire   [1:0] csr_internal_bus_write_response_status;
   wire   [1:0] csr_internal_bus_next_pending_write_response_status;
   wire   [1:0] csr_internal_bus_write_status;
   wire   csr_internal_bus_write_response_ready;
   wire   csr_internal_bus_write_response_valid;
   wire   csr_internal_bus_pending_write_response_load;
   wire   csr_internal_bus_next_pending_write_response_valid;
   wire   csr_internal_bus_write_response_transfer;
   wire   csr_internal_bus_next_read_priority;
   wire   [7:0] csr_internal_bus_read_address;
   wire   [7:0] csr_internal_bus_write_address;
   wire   [7:0] csr_internal_bus_next_address;
   wire   [31:0] csr_internal_read_data;
   wire   csr_internal_read_access;
   wire   csr_internal_write_access;

   //   Bus Protocol: AMBA_4_AXILite
   //   Bus Address Units: bytes
   localparam
      STATE_IDLE = 1'h0,
      STATE_BUSY = 1'h1;

   assign csr_internal_bus_read_request_address = ARADDR;
   assign csr_internal_bus_read_request_valid = ARVALID;
   assign csr_internal_bus_read_response_ready = RREADY;
   assign csr_internal_bus_write_request_address = AWADDR;
   assign csr_internal_bus_write_request_valid = AWVALID;
   assign csr_internal_bus_write_data_data = WDATA;
   assign csr_internal_bus_write_data_valid = WVALID;
   assign csr_internal_bus_write_response_ready = BREADY;

   assign ARREADY = csr_internal_bus_read_request_ready;

   assign RDATA = csr_internal_bus_read_response_data;

   assign RRESP = csr_internal_bus_read_response_status;

   assign RVALID = csr_internal_bus_read_response_valid;

   assign AWREADY = csr_internal_bus_write_request_ready;

   assign WREADY = csr_internal_bus_write_data_ready;

   assign BRESP = csr_internal_bus_write_response_status;

   assign BVALID = csr_internal_bus_write_response_valid;

   // Bus slave state machine
   always @(
      csr_internal_bus_select_read or
      csr_internal_bus_select_write or
      csr_internal_bus_state
      )
      case (csr_internal_bus_state)
      STATE_IDLE:
         if (
            csr_internal_bus_select_read |
            csr_internal_bus_select_write
            )
            csr_internal_bus_next_state = STATE_BUSY;
         else
            csr_internal_bus_next_state = STATE_IDLE;
      STATE_BUSY:
         if (
            csr_internal_bus_select_read |
            csr_internal_bus_select_write
            )
            csr_internal_bus_next_state = STATE_BUSY;
         else
            csr_internal_bus_next_state = STATE_IDLE;
      endcase

   always @(posedge ACLK)
      if (!RESET)
         csr_internal_bus_state <=
            STATE_IDLE;
      else
         csr_internal_bus_state <=
            csr_internal_bus_next_state;

   assign csr_internal_read_access =
      csr_internal_bus_read_active &
      (csr_internal_bus_state == STATE_BUSY);

   assign csr_internal_write_access =
      csr_internal_bus_write_active &
      (csr_internal_bus_state == STATE_BUSY);

   assign csr_internal_bus_read_request_transfer =
      csr_internal_bus_read_request_valid &
      csr_internal_bus_read_request_ready;

   assign csr_internal_bus_read_response_transfer =
      csr_internal_bus_read_response_valid &
      csr_internal_bus_read_response_ready;

   assign csr_internal_bus_write_request_transfer =
      csr_internal_bus_write_request_valid &
      csr_internal_bus_write_request_ready;

   assign csr_internal_bus_write_data_transfer =
      csr_internal_bus_write_data_valid &
      csr_internal_bus_write_data_ready;

   assign csr_internal_bus_write_response_transfer =
      csr_internal_bus_write_response_valid &
      csr_internal_bus_write_response_ready;

   assign csr_internal_bus_read_request_ready =
      ~csr_internal_bus_pending_read_request_valid;

   assign csr_internal_bus_write_request_ready =
      ~csr_internal_bus_pending_write_request_valid;

   assign csr_internal_bus_write_data_ready =
      ~csr_internal_bus_pending_write_data_valid;

   assign csr_internal_bus_read_response_valid =
      csr_internal_bus_read_ready |
      csr_internal_bus_pending_read_response_valid;

   assign csr_internal_bus_write_response_valid =
      csr_internal_bus_write_ready |
      csr_internal_bus_pending_write_response_valid;

   assign csr_internal_bus_pending_read_request_load =
      csr_internal_bus_read_request_transfer &
      (~csr_internal_bus_select_read);

   assign csr_internal_bus_pending_read_response_load =
      csr_internal_bus_read_ready &
      (~csr_internal_bus_read_response_transfer);

   assign csr_internal_bus_pending_write_request_load =
      csr_internal_bus_write_request_transfer &
      (~csr_internal_bus_select_write);

   assign csr_internal_bus_pending_write_data_load =
      csr_internal_bus_write_data_transfer &
      (~csr_internal_bus_select_write);

   assign csr_internal_bus_pending_write_response_load =
      csr_internal_bus_write_ready &
      (~csr_internal_bus_write_response_transfer);

   assign csr_internal_bus_next_pending_read_request_valid =
      (csr_internal_bus_pending_read_request_valid) ?
         (~csr_internal_bus_select_read):
         csr_internal_bus_pending_read_request_load;

   assign csr_internal_bus_next_pending_read_request_address =
      (csr_internal_bus_pending_read_request_load) ?
         csr_internal_bus_read_request_address:
         csr_internal_bus_pending_read_request_address;

   assign csr_internal_bus_next_pending_read_response_valid =
      (csr_internal_bus_pending_read_response_valid) ?
         (~csr_internal_bus_read_response_transfer):
         csr_internal_bus_pending_read_response_load;

   assign csr_internal_bus_next_pending_read_response_data =
      (csr_internal_bus_pending_read_response_load) ?
         csr_internal_read_data:
         csr_internal_bus_pending_read_response_data;

   assign csr_internal_bus_next_pending_read_response_status =
      (csr_internal_bus_pending_read_response_load) ?
         csr_internal_bus_read_response_status:
         csr_internal_bus_pending_read_response_status;

   assign csr_internal_bus_next_pending_write_request_valid =
      (csr_internal_bus_pending_write_request_valid) ?
         (~csr_internal_bus_select_write):
         csr_internal_bus_pending_write_request_load;

   assign csr_internal_bus_next_pending_write_request_address =
      (csr_internal_bus_pending_write_request_load) ?
         csr_internal_bus_write_request_address:
         csr_internal_bus_pending_write_request_address;

   assign csr_internal_bus_next_pending_write_data_valid =
      (csr_internal_bus_pending_write_data_valid) ?
         (~csr_internal_bus_select_write):
         csr_internal_bus_pending_write_data_load;

   assign csr_internal_bus_next_pending_write_data_data =
      (csr_internal_bus_pending_write_data_load) ?
         csr_internal_bus_write_data_data:
         csr_internal_bus_pending_write_data_data;

   assign csr_internal_bus_next_pending_write_response_valid =
      (csr_internal_bus_pending_write_response_valid) ?
         (~csr_internal_bus_write_response_transfer):
         csr_internal_bus_pending_write_response_load;

   assign csr_internal_bus_next_pending_write_response_status =
      (csr_internal_bus_pending_write_response_load) ?
         csr_internal_bus_write_response_status:
         csr_internal_bus_pending_write_response_status;

   assign csr_internal_bus_read_request_available =
      csr_internal_bus_read_request_transfer |
      csr_internal_bus_pending_read_request_valid;

   assign csr_internal_bus_read_available =
      csr_internal_bus_read_request_available &
      (
         csr_internal_bus_read_response_ready |
         (
            (~csr_internal_bus_read_active) &
            (~csr_internal_bus_pending_read_response_valid)
         )
      );

   assign csr_internal_bus_write_request_available =
      csr_internal_bus_write_request_transfer |
      csr_internal_bus_pending_write_request_valid;

   assign csr_internal_bus_write_data_available =
      csr_internal_bus_write_data_transfer |
      csr_internal_bus_pending_write_data_valid;

   assign csr_internal_bus_write_available =
      csr_internal_bus_write_request_available &
      csr_internal_bus_write_data_available &
      (
         csr_internal_bus_write_response_ready |
         (
            (~csr_internal_bus_write_active) &
            (~csr_internal_bus_pending_write_response_valid)
         )
      );

   assign csr_internal_bus_select_read =
      csr_internal_bus_read_available &
      (
         csr_internal_bus_read_priority |
         (~csr_internal_bus_write_available)
      );

   assign csr_internal_bus_select_write =
      csr_internal_bus_write_available &
      (
         (~csr_internal_bus_read_priority) |
         (~csr_internal_bus_read_available)
      );

   assign csr_internal_bus_next_read_active =
      csr_internal_bus_select_read;

   assign csr_internal_bus_read_ready =
      csr_internal_bus_read_active;

   assign csr_internal_bus_next_write_active =
         csr_internal_bus_select_write;

   assign csr_internal_bus_write_ready =
      csr_internal_bus_write_active;

   assign csr_internal_bus_next_read_priority =
      (csr_internal_bus_read_priority) ?
         (~csr_internal_bus_select_read):
         csr_internal_bus_select_write;

   assign csr_internal_bus_read_address =
      (csr_internal_bus_pending_read_request_valid) ?
         csr_internal_bus_pending_read_request_address:
         csr_internal_bus_read_request_address;

   assign csr_internal_bus_write_address =
      (csr_internal_bus_pending_write_request_valid) ?
         csr_internal_bus_pending_write_request_address:
         csr_internal_bus_write_request_address;

   assign csr_internal_bus_next_address =
      (csr_internal_bus_select_read | csr_internal_bus_select_write) ?
         (
            (csr_internal_bus_select_read) ?
               csr_internal_bus_read_address:
               csr_internal_bus_write_address
         ):
         csr_internal_bus_address;

   assign csr_internal_bus_read_response_data =
      (csr_internal_bus_pending_read_response_valid) ?
         csr_internal_bus_pending_read_response_data:
         csr_internal_read_data;

   assign csr_internal_bus_read_response_status =
      (csr_internal_bus_pending_read_response_valid) ?
         csr_internal_bus_pending_read_response_status:
         csr_internal_bus_read_status;

   assign csr_internal_bus_read_status =
      2'h0;

   assign csr_internal_bus_write_response_status =
      (csr_internal_bus_pending_write_response_valid) ?
         csr_internal_bus_pending_write_response_status:
         csr_internal_bus_write_status;

   assign csr_internal_bus_write_status =
      2'h0;

   assign csr_internal_bus_next_write_data =
      (csr_internal_bus_select_write) ?
         (
            (csr_internal_bus_pending_write_data_valid) ?
               csr_internal_bus_pending_write_data_data:
               csr_internal_bus_write_data_data
         ):
         csr_internal_bus_write_data;

   always @(posedge ACLK)
      if (!RESET)
         begin
            csr_internal_bus_pending_read_request_valid <= 1'h0;
            csr_internal_bus_pending_read_request_address <= 8'h0;
            csr_internal_bus_pending_read_response_valid <= 1'h0;
            csr_internal_bus_pending_read_response_data <= 32'h0;
            csr_internal_bus_pending_read_response_status <= 2'h0;
            csr_internal_bus_pending_write_request_valid <= 1'h0;
            csr_internal_bus_pending_write_request_address <= 8'h0;
            csr_internal_bus_pending_write_data_valid <= 1'h0;
            csr_internal_bus_pending_write_data_data <= 32'h0;
            csr_internal_bus_pending_write_response_valid <= 1'h0;
            csr_internal_bus_pending_write_response_status <= 2'h0;
            csr_internal_bus_read_priority <= 1'h0;
            csr_internal_bus_address <= 8'h0;
            csr_internal_bus_write_data <= 32'h0;
            csr_internal_bus_read_active <= 1'h0;
            csr_internal_bus_write_active <= 1'h0;
         end
      else
         begin
            csr_internal_bus_pending_read_request_valid <=
               csr_internal_bus_next_pending_read_request_valid;
            csr_internal_bus_pending_read_request_address <=
               csr_internal_bus_next_pending_read_request_address;
            csr_internal_bus_pending_read_response_valid <=
               csr_internal_bus_next_pending_read_response_valid;
            csr_internal_bus_pending_read_response_data <=
               csr_internal_bus_next_pending_read_response_data;
            csr_internal_bus_pending_read_response_status <=
               csr_internal_bus_next_pending_read_response_status;
            csr_internal_bus_pending_write_request_valid <=
               csr_internal_bus_next_pending_write_request_valid;
            csr_internal_bus_pending_write_request_address <=
               csr_internal_bus_next_pending_write_request_address;
            csr_internal_bus_pending_write_data_valid <=
               csr_internal_bus_next_pending_write_data_valid;
            csr_internal_bus_pending_write_data_data <=
               csr_internal_bus_next_pending_write_data_data;
            csr_internal_bus_pending_write_response_valid <=
               csr_internal_bus_next_pending_write_response_valid;
            csr_internal_bus_pending_write_response_status <=
               csr_internal_bus_next_pending_write_response_status;
            csr_internal_bus_read_priority <=
               csr_internal_bus_next_read_priority;
            csr_internal_bus_address <=
               csr_internal_bus_next_address;
            csr_internal_bus_write_data <=
               csr_internal_bus_next_write_data;
            csr_internal_bus_read_active <=
               csr_internal_bus_next_read_active;
            csr_internal_bus_write_active <=
               csr_internal_bus_next_write_active;
         end

   // Address Decode
   assign csr_internal_decode_VERSION =
      (csr_internal_bus_address[7:2] == 6'h0);
   assign csr_internal_decode_CAP_REGION =
      (csr_internal_bus_address[7:2] == 6'h1);
   assign csr_internal_decode_GLOBAL_CTRL =
      (csr_internal_bus_address[7:2] == 6'h8);
   assign csr_internal_decode_STAT_CMP1 =
      (csr_internal_bus_address[7:2] == 6'h10);
   assign csr_internal_decode_STAT_CMP2 =
      (csr_internal_bus_address[7:2] == 6'h11);
   assign csr_internal_decode_ERR_STATUS =
      (csr_internal_bus_address[7:2] == 6'h18);
   assign csr_internal_decode_ERR_CLR =
      (csr_internal_bus_address[7:2] == 6'h19);
   assign csr_internal_decode_R0_FPA_START =
      (csr_internal_bus_address[7:2] == 6'h20);
   assign csr_internal_decode_R0_FPA_END =
      (csr_internal_bus_address[7:2] == 6'h21);
   assign csr_internal_decode_R0_FPA_BASE =
      (csr_internal_bus_address[7:2] == 6'h22);
   assign csr_internal_decode_R0_CMP_CTRL =
      (csr_internal_bus_address[7:2] == 6'h23);
   assign csr_internal_decode_R1_FPA_START =
      (csr_internal_bus_address[7:2] == 6'h28);
   assign csr_internal_decode_R1_FPA_END =
      (csr_internal_bus_address[7:2] == 6'h29);
   assign csr_internal_decode_R1_FPA_BASE =
      (csr_internal_bus_address[7:2] == 6'h2a);
   assign csr_internal_decode_R1_CMP_CTRL =
      (csr_internal_bus_address[7:2] == 6'h2b);


   //
   // Register: VERSION
   // Source filename: AIDC/AIDC_CFG.rdl, line: 11
   // Addressmap Byte Offset: 0x0
   // Access: read-only
   //
   assign csr_internal_read_value_VERSION =
      csr_internal_field_VERSION_version;
   assign csr_internal_read_bus_VERSION =
      csr_internal_read_value_VERSION &
      {32{csr_internal_decode_VERSION}};

      // Field: VERSION.version
      // Source filename: AIDC/AIDC_CFG.rdl, line: 10
      // Position: [31:0]
      // Access: read-only
      // Type: constant
      assign csr_internal_field_VERSION_version = 32'h10101;

      assign VERSION_version =
         csr_internal_field_VERSION_version;


   //
   // Register: CAP_REGION
   // Source filename: AIDC/AIDC_CFG.rdl, line: 20
   // Addressmap Byte Offset: 0x4
   // Access: read-only
   //
   assign csr_internal_read_value_CAP_REGION =
      csr_internal_field_CAP_REGION_max_region_size;
   assign csr_internal_read_bus_CAP_REGION =
      csr_internal_read_value_CAP_REGION &
      {32{csr_internal_decode_CAP_REGION}};

      // Field: CAP_REGION.max_region_size
      // Source filename: AIDC/AIDC_CFG.rdl, line: 19
      // Position: [31:0]
      // Access: read-only
      // Type: status
      //    Reset Value: 32'h8000000

      assign csr_internal_input_CAP_REGION_max_region_size =
         CAP_REGION_max_region_size;

      assign csr_internal_field_CAP_REGION_max_region_size =
         csr_internal_input_CAP_REGION_max_region_size;


   //
   // Register: GLOBAL_CTRL
   // Source filename: AIDC/AIDC_CFG.rdl, line: 35
   // Addressmap Byte Offset: 0x20
   // Access: read-write
   //
   assign csr_internal_read_value_GLOBAL_CTRL =
      {
         30'h0,
         csr_internal_field_GLOBAL_CTRL_clr_stats,
         csr_internal_field_GLOBAL_CTRL_Enable
      };
   assign csr_internal_read_bus_GLOBAL_CTRL =
      csr_internal_read_value_GLOBAL_CTRL &
      {32{csr_internal_decode_GLOBAL_CTRL}};

      // Field: GLOBAL_CTRL.clr_stats
      // Source filename: AIDC/AIDC_CFG.rdl, line: 34
      // Position: [1]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_GLOBAL_CTRL_clr_stats =
         csr_internal_decode_GLOBAL_CTRL &
         csr_internal_write_access;

      assign csr_internal_next_field_GLOBAL_CTRL_clr_stats =
         (csr_internal_write_access_GLOBAL_CTRL_clr_stats) ?
            csr_internal_bus_write_data[1]:
            csr_internal_field_GLOBAL_CTRL_clr_stats;

      assign csr_internal_reset_value_GLOBAL_CTRL_clr_stats =
         1'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_GLOBAL_CTRL_clr_stats <=
               csr_internal_reset_value_GLOBAL_CTRL_clr_stats;
         else
            csr_internal_field_GLOBAL_CTRL_clr_stats <=
               csr_internal_next_field_GLOBAL_CTRL_clr_stats;

      assign GLOBAL_CTRL_clr_stats =
         csr_internal_field_GLOBAL_CTRL_clr_stats;

      // Field: GLOBAL_CTRL.Enable
      // Source filename: AIDC/AIDC_CFG.rdl, line: 28
      // Position: [0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_GLOBAL_CTRL_Enable =
         csr_internal_decode_GLOBAL_CTRL &
         csr_internal_write_access;

      assign csr_internal_next_field_GLOBAL_CTRL_Enable =
         (csr_internal_write_access_GLOBAL_CTRL_Enable) ?
            csr_internal_bus_write_data[0]:
            csr_internal_field_GLOBAL_CTRL_Enable;

      assign csr_internal_reset_value_GLOBAL_CTRL_Enable =
         1'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_GLOBAL_CTRL_Enable <=
               csr_internal_reset_value_GLOBAL_CTRL_Enable;
         else
            csr_internal_field_GLOBAL_CTRL_Enable <=
               csr_internal_next_field_GLOBAL_CTRL_Enable;

      assign GLOBAL_CTRL_Enable =
         csr_internal_field_GLOBAL_CTRL_Enable;


   //
   // Register: STAT_CMP1
   // Source filename: AIDC/AIDC_CFG.rdl, line: 45
   // Addressmap Byte Offset: 0x40
   // Access: read-only
   //
   assign csr_internal_read_value_STAT_CMP1 =
      csr_internal_field_STAT_CMP1_cmp_blk_cnt;
   assign csr_internal_read_bus_STAT_CMP1 =
      csr_internal_read_value_STAT_CMP1 &
      {32{csr_internal_decode_STAT_CMP1}};

      // Field: STAT_CMP1.cmp_blk_cnt
      // Source filename: AIDC/AIDC_CFG.rdl, line: 44
      // Position: [31:0]
      // Access: read-only
      // Type: counter

      assign csr_internal_increment_STAT_CMP1_cmp_blk_cnt =
         STAT_CMP1_cmp_blk_cnt_increment;

      assign csr_internal_next_field_STAT_CMP1_cmp_blk_cnt =
         (csr_internal_increment_STAT_CMP1_cmp_blk_cnt) ?
            csr_internal_incremented_STAT_CMP1_cmp_blk_cnt:
            csr_internal_field_STAT_CMP1_cmp_blk_cnt;

      assign csr_internal_incremented_STAT_CMP1_cmp_blk_cnt =
         (csr_internal_field_STAT_CMP1_cmp_blk_cnt + 32'h1);

      assign csr_internal_reset_value_STAT_CMP1_cmp_blk_cnt =
         32'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_STAT_CMP1_cmp_blk_cnt <=
               csr_internal_reset_value_STAT_CMP1_cmp_blk_cnt;
         else
            csr_internal_field_STAT_CMP1_cmp_blk_cnt <=
               csr_internal_next_field_STAT_CMP1_cmp_blk_cnt;


   //
   // Register: STAT_CMP2
   // Source filename: AIDC/AIDC_CFG.rdl, line: 54
   // Addressmap Byte Offset: 0x44
   // Access: read-only
   //
   assign csr_internal_read_value_STAT_CMP2 =
      csr_internal_field_STAT_CMP2_cmp_overflown_byte_cnt;
   assign csr_internal_read_bus_STAT_CMP2 =
      csr_internal_read_value_STAT_CMP2 &
      {32{csr_internal_decode_STAT_CMP2}};

      // Field: STAT_CMP2.cmp_overflown_byte_cnt
      // Source filename: AIDC/AIDC_CFG.rdl, line: 53
      // Position: [31:0]
      // Access: read-only
      // Type: counter

      assign csr_internal_increment_STAT_CMP2_cmp_overflown_byte_cnt =
         STAT_CMP2_cmp_overflown_byte_cnt_increment;

      assign csr_internal_next_field_STAT_CMP2_cmp_overflown_byte_cnt =
         (csr_internal_increment_STAT_CMP2_cmp_overflown_byte_cnt) ?
            csr_internal_incremented_STAT_CMP2_cmp_overflown_byte_cnt:
            csr_internal_field_STAT_CMP2_cmp_overflown_byte_cnt;

      assign csr_internal_incremented_STAT_CMP2_cmp_overflown_byte_cnt =
         (csr_internal_field_STAT_CMP2_cmp_overflown_byte_cnt + 32'h1);

      assign csr_internal_reset_value_STAT_CMP2_cmp_overflown_byte_cnt =
         32'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_STAT_CMP2_cmp_overflown_byte_cnt <=
               csr_internal_reset_value_STAT_CMP2_cmp_overflown_byte_cnt;
         else
            csr_internal_field_STAT_CMP2_cmp_overflown_byte_cnt <=
               csr_internal_next_field_STAT_CMP2_cmp_overflown_byte_cnt;


   //
   // Register: ERR_STATUS
   // Source filename: AIDC/AIDC_CFG.rdl, line: 75
   // Addressmap Byte Offset: 0x60
   // Access: read-only
   //
   assign csr_internal_read_value_ERR_STATUS =
      {
         29'h0,
         csr_internal_field_ERR_STATUS_err_burst,
         csr_internal_field_ERR_STATUS_err_oor,
         csr_internal_field_ERR_STATUS_err_cfg
      };
   assign csr_internal_read_bus_ERR_STATUS =
      csr_internal_read_value_ERR_STATUS &
      {32{csr_internal_decode_ERR_STATUS}};

      // Field: ERR_STATUS.err_burst
      // Source filename: AIDC/AIDC_CFG.rdl, line: 74
      // Position: [2]
      // Access: read-only
      // Type: status
      //    Reset Value: 1'd0

      assign csr_internal_input_ERR_STATUS_err_burst =
         ERR_STATUS_err_burst;

      assign csr_internal_field_ERR_STATUS_err_burst =
         csr_internal_input_ERR_STATUS_err_burst;

      // Field: ERR_STATUS.err_oor
      // Source filename: AIDC/AIDC_CFG.rdl, line: 68
      // Position: [1]
      // Access: read-only
      // Type: status
      //    Reset Value: 1'd0

      assign csr_internal_input_ERR_STATUS_err_oor =
         ERR_STATUS_err_oor;

      assign csr_internal_field_ERR_STATUS_err_oor =
         csr_internal_input_ERR_STATUS_err_oor;

      // Field: ERR_STATUS.err_cfg
      // Source filename: AIDC/AIDC_CFG.rdl, line: 62
      // Position: [0]
      // Access: read-only
      // Type: status
      //    Reset Value: 1'd0

      assign csr_internal_input_ERR_STATUS_err_cfg =
         ERR_STATUS_err_cfg;

      assign csr_internal_field_ERR_STATUS_err_cfg =
         csr_internal_input_ERR_STATUS_err_cfg;


   //
   // Register: ERR_CLR
   // Source filename: AIDC/AIDC_CFG.rdl, line: 99
   // Addressmap Byte Offset: 0x64
   // Access: write-only
   //

      // Field: ERR_CLR.clr_burst
      // Source filename: AIDC/AIDC_CFG.rdl, line: 98
      // Position: [2]
      // Access: write-only
      // Type: configuration
      // Return To Zero
      assign csr_internal_write_access_ERR_CLR_clr_burst =
         csr_internal_decode_ERR_CLR &
         csr_internal_write_access;

      assign csr_internal_next_field_ERR_CLR_clr_burst =
         (csr_internal_write_access_ERR_CLR_clr_burst) ?
            csr_internal_bus_write_data[2]:
            1'h0;

      assign csr_internal_reset_value_ERR_CLR_clr_burst =
         1'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_ERR_CLR_clr_burst <=
               csr_internal_reset_value_ERR_CLR_clr_burst;
         else
            csr_internal_field_ERR_CLR_clr_burst <=
               csr_internal_next_field_ERR_CLR_clr_burst;

      assign ERR_CLR_clr_burst =
         csr_internal_field_ERR_CLR_clr_burst;

      // Field: ERR_CLR.clr_oor
      // Source filename: AIDC/AIDC_CFG.rdl, line: 91
      // Position: [1]
      // Access: write-only
      // Type: configuration
      // Return To Zero
      assign csr_internal_write_access_ERR_CLR_clr_oor =
         csr_internal_decode_ERR_CLR &
         csr_internal_write_access;

      assign csr_internal_next_field_ERR_CLR_clr_oor =
         (csr_internal_write_access_ERR_CLR_clr_oor) ?
            csr_internal_bus_write_data[1]:
            1'h0;

      assign csr_internal_reset_value_ERR_CLR_clr_oor =
         1'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_ERR_CLR_clr_oor <=
               csr_internal_reset_value_ERR_CLR_clr_oor;
         else
            csr_internal_field_ERR_CLR_clr_oor <=
               csr_internal_next_field_ERR_CLR_clr_oor;

      assign ERR_CLR_clr_oor =
         csr_internal_field_ERR_CLR_clr_oor;

      // Field: ERR_CLR.clr_cfg
      // Source filename: AIDC/AIDC_CFG.rdl, line: 84
      // Position: [0]
      // Access: write-only
      // Type: configuration
      // Return To Zero
      assign csr_internal_write_access_ERR_CLR_clr_cfg =
         csr_internal_decode_ERR_CLR &
         csr_internal_write_access;

      assign csr_internal_next_field_ERR_CLR_clr_cfg =
         (csr_internal_write_access_ERR_CLR_clr_cfg) ?
            csr_internal_bus_write_data[0]:
            1'h0;

      assign csr_internal_reset_value_ERR_CLR_clr_cfg =
         1'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_ERR_CLR_clr_cfg <=
               csr_internal_reset_value_ERR_CLR_clr_cfg;
         else
            csr_internal_field_ERR_CLR_clr_cfg <=
               csr_internal_next_field_ERR_CLR_clr_cfg;

      assign ERR_CLR_clr_cfg =
         csr_internal_field_ERR_CLR_clr_cfg;


   //
   // Register: R0_FPA_START
   // Source filename: AIDC/AIDC_CFG.rdl, line: 108
   // Addressmap Byte Offset: 0x80
   // Access: read-only
   //
   assign csr_internal_read_value_R0_FPA_START =
      csr_internal_field_R0_FPA_START_start_addr;
   assign csr_internal_read_bus_R0_FPA_START =
      csr_internal_read_value_R0_FPA_START &
      {32{csr_internal_decode_R0_FPA_START}};

      // Field: R0_FPA_START.start_addr
      // Source filename: AIDC/AIDC_CFG.rdl, line: 107
      // Position: [31:0]
      // Access: read-only
      // Type: constant
      assign csr_internal_field_R0_FPA_START_start_addr = 32'h20000000;

      assign R0_FPA_START_start_addr =
         csr_internal_field_R0_FPA_START_start_addr;


   //
   // Register: R0_FPA_END
   // Source filename: AIDC/AIDC_CFG.rdl, line: 116
   // Addressmap Byte Offset: 0x84
   // Access: read-write
   //
   assign csr_internal_read_value_R0_FPA_END =
      csr_internal_field_R0_FPA_END_end_addr;
   assign csr_internal_read_bus_R0_FPA_END =
      csr_internal_read_value_R0_FPA_END &
      {32{csr_internal_decode_R0_FPA_END}};

      // Field: R0_FPA_END.end_addr
      // Source filename: AIDC/AIDC_CFG.rdl, line: 115
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_R0_FPA_END_end_addr =
         csr_internal_decode_R0_FPA_END &
         csr_internal_write_access;

      assign csr_internal_next_field_R0_FPA_END_end_addr =
         (csr_internal_write_access_R0_FPA_END_end_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_R0_FPA_END_end_addr;

      assign csr_internal_reset_value_R0_FPA_END_end_addr =
         32'h20000000;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_R0_FPA_END_end_addr <=
               csr_internal_reset_value_R0_FPA_END_end_addr;
         else
            csr_internal_field_R0_FPA_END_end_addr <=
               csr_internal_next_field_R0_FPA_END_end_addr;

      assign R0_FPA_END_end_addr =
         csr_internal_field_R0_FPA_END_end_addr;


   //
   // Register: R0_FPA_BASE
   // Source filename: AIDC/AIDC_CFG.rdl, line: 124
   // Addressmap Byte Offset: 0x88
   // Access: read-write
   //
   assign csr_internal_read_value_R0_FPA_BASE =
      csr_internal_field_R0_FPA_BASE_base_addr;
   assign csr_internal_read_bus_R0_FPA_BASE =
      csr_internal_read_value_R0_FPA_BASE &
      {32{csr_internal_decode_R0_FPA_BASE}};

      // Field: R0_FPA_BASE.base_addr
      // Source filename: AIDC/AIDC_CFG.rdl, line: 123
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_R0_FPA_BASE_base_addr =
         csr_internal_decode_R0_FPA_BASE &
         csr_internal_write_access;

      assign csr_internal_next_field_R0_FPA_BASE_base_addr =
         (csr_internal_write_access_R0_FPA_BASE_base_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_R0_FPA_BASE_base_addr;

      assign csr_internal_reset_value_R0_FPA_BASE_base_addr =
         32'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_R0_FPA_BASE_base_addr <=
               csr_internal_reset_value_R0_FPA_BASE_base_addr;
         else
            csr_internal_field_R0_FPA_BASE_base_addr <=
               csr_internal_next_field_R0_FPA_BASE_base_addr;

      assign R0_FPA_BASE_base_addr =
         csr_internal_field_R0_FPA_BASE_base_addr;


   //
   // Register: R0_CMP_CTRL
   // Source filename: AIDC/AIDC_CFG.rdl, line: 132
   // Addressmap Byte Offset: 0x8c
   // Access: read-write
   //
   assign csr_internal_read_value_R0_CMP_CTRL =
      {
         29'h0,
         csr_internal_field_R0_CMP_CTRL_cmp_ratio
      };
   assign csr_internal_read_bus_R0_CMP_CTRL =
      csr_internal_read_value_R0_CMP_CTRL &
      {32{csr_internal_decode_R0_CMP_CTRL}};

      // Field: R0_CMP_CTRL.cmp_ratio
      // Source filename: AIDC/AIDC_CFG.rdl, line: 131
      // Position: [2:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_R0_CMP_CTRL_cmp_ratio =
         csr_internal_decode_R0_CMP_CTRL &
         csr_internal_write_access;

      assign csr_internal_next_field_R0_CMP_CTRL_cmp_ratio =
         (csr_internal_write_access_R0_CMP_CTRL_cmp_ratio) ?
            csr_internal_bus_write_data[2:0]:
            csr_internal_field_R0_CMP_CTRL_cmp_ratio;

      assign csr_internal_reset_value_R0_CMP_CTRL_cmp_ratio =
         3'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_R0_CMP_CTRL_cmp_ratio <=
               csr_internal_reset_value_R0_CMP_CTRL_cmp_ratio;
         else
            csr_internal_field_R0_CMP_CTRL_cmp_ratio <=
               csr_internal_next_field_R0_CMP_CTRL_cmp_ratio;

      assign R0_CMP_CTRL_cmp_ratio =
         csr_internal_field_R0_CMP_CTRL_cmp_ratio;


   //
   // Register: R1_FPA_START
   // Source filename: AIDC/AIDC_CFG.rdl, line: 141
   // Addressmap Byte Offset: 0xa0
   // Access: read-only
   //
   assign csr_internal_read_value_R1_FPA_START =
      csr_internal_field_R1_FPA_START_start_addr;
   assign csr_internal_read_bus_R1_FPA_START =
      csr_internal_read_value_R1_FPA_START &
      {32{csr_internal_decode_R1_FPA_START}};

      // Field: R1_FPA_START.start_addr
      // Source filename: AIDC/AIDC_CFG.rdl, line: 140
      // Position: [31:0]
      // Access: read-only
      // Type: constant
      assign csr_internal_field_R1_FPA_START_start_addr = 32'h28000000;

      assign R1_FPA_START_start_addr =
         csr_internal_field_R1_FPA_START_start_addr;


   //
   // Register: R1_FPA_END
   // Source filename: AIDC/AIDC_CFG.rdl, line: 149
   // Addressmap Byte Offset: 0xa4
   // Access: read-write
   //
   assign csr_internal_read_value_R1_FPA_END =
      csr_internal_field_R1_FPA_END_end_addr;
   assign csr_internal_read_bus_R1_FPA_END =
      csr_internal_read_value_R1_FPA_END &
      {32{csr_internal_decode_R1_FPA_END}};

      // Field: R1_FPA_END.end_addr
      // Source filename: AIDC/AIDC_CFG.rdl, line: 148
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_R1_FPA_END_end_addr =
         csr_internal_decode_R1_FPA_END &
         csr_internal_write_access;

      assign csr_internal_next_field_R1_FPA_END_end_addr =
         (csr_internal_write_access_R1_FPA_END_end_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_R1_FPA_END_end_addr;

      assign csr_internal_reset_value_R1_FPA_END_end_addr =
         32'h28000000;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_R1_FPA_END_end_addr <=
               csr_internal_reset_value_R1_FPA_END_end_addr;
         else
            csr_internal_field_R1_FPA_END_end_addr <=
               csr_internal_next_field_R1_FPA_END_end_addr;

      assign R1_FPA_END_end_addr =
         csr_internal_field_R1_FPA_END_end_addr;


   //
   // Register: R1_FPA_BASE
   // Source filename: AIDC/AIDC_CFG.rdl, line: 157
   // Addressmap Byte Offset: 0xa8
   // Access: read-write
   //
   assign csr_internal_read_value_R1_FPA_BASE =
      csr_internal_field_R1_FPA_BASE_base_addr;
   assign csr_internal_read_bus_R1_FPA_BASE =
      csr_internal_read_value_R1_FPA_BASE &
      {32{csr_internal_decode_R1_FPA_BASE}};

      // Field: R1_FPA_BASE.base_addr
      // Source filename: AIDC/AIDC_CFG.rdl, line: 156
      // Position: [31:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_R1_FPA_BASE_base_addr =
         csr_internal_decode_R1_FPA_BASE &
         csr_internal_write_access;

      assign csr_internal_next_field_R1_FPA_BASE_base_addr =
         (csr_internal_write_access_R1_FPA_BASE_base_addr) ?
            csr_internal_bus_write_data:
            csr_internal_field_R1_FPA_BASE_base_addr;

      assign csr_internal_reset_value_R1_FPA_BASE_base_addr =
         32'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_R1_FPA_BASE_base_addr <=
               csr_internal_reset_value_R1_FPA_BASE_base_addr;
         else
            csr_internal_field_R1_FPA_BASE_base_addr <=
               csr_internal_next_field_R1_FPA_BASE_base_addr;

      assign R1_FPA_BASE_base_addr =
         csr_internal_field_R1_FPA_BASE_base_addr;


   //
   // Register: R1_CMP_CTRL
   // Source filename: AIDC/AIDC_CFG.rdl, line: 165
   // Addressmap Byte Offset: 0xac
   // Access: read-write
   //
   assign csr_internal_read_value_R1_CMP_CTRL =
      {
         29'h0,
         csr_internal_field_R1_CMP_CTRL_cmp_ratio
      };
   assign csr_internal_read_bus_R1_CMP_CTRL =
      csr_internal_read_value_R1_CMP_CTRL &
      {32{csr_internal_decode_R1_CMP_CTRL}};

      // Field: R1_CMP_CTRL.cmp_ratio
      // Source filename: AIDC/AIDC_CFG.rdl, line: 164
      // Position: [2:0]
      // Access: read-write
      // Type: configuration
      assign csr_internal_write_access_R1_CMP_CTRL_cmp_ratio =
         csr_internal_decode_R1_CMP_CTRL &
         csr_internal_write_access;

      assign csr_internal_next_field_R1_CMP_CTRL_cmp_ratio =
         (csr_internal_write_access_R1_CMP_CTRL_cmp_ratio) ?
            csr_internal_bus_write_data[2:0]:
            csr_internal_field_R1_CMP_CTRL_cmp_ratio;

      assign csr_internal_reset_value_R1_CMP_CTRL_cmp_ratio =
         3'd0;

      always @(posedge ACLK)
         if (!RESET)
            csr_internal_field_R1_CMP_CTRL_cmp_ratio <=
               csr_internal_reset_value_R1_CMP_CTRL_cmp_ratio;
         else
            csr_internal_field_R1_CMP_CTRL_cmp_ratio <=
               csr_internal_next_field_R1_CMP_CTRL_cmp_ratio;

      assign R1_CMP_CTRL_cmp_ratio =
         csr_internal_field_R1_CMP_CTRL_cmp_ratio;


   assign csr_internal_read_data =
      csr_internal_read_bus_VERSION |
      csr_internal_read_bus_CAP_REGION |
      csr_internal_read_bus_GLOBAL_CTRL |
      csr_internal_read_bus_STAT_CMP1 |
      csr_internal_read_bus_STAT_CMP2 |
      csr_internal_read_bus_ERR_STATUS |
      csr_internal_read_bus_R0_FPA_START |
      csr_internal_read_bus_R0_FPA_END |
      csr_internal_read_bus_R0_FPA_BASE |
      csr_internal_read_bus_R0_CMP_CTRL |
      csr_internal_read_bus_R1_FPA_START |
      csr_internal_read_bus_R1_FPA_END |
      csr_internal_read_bus_R1_FPA_BASE |
      csr_internal_read_bus_R1_CMP_CTRL;

endmodule
